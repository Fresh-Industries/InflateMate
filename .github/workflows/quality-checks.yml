name: 'Quality & Performance Checks'

on:
  pull_request:
    branches: [main, staging]
  push:
    branches: [main, staging]

env:
  DATABASE_URL: 'postgresql://test:test@localhost:5432/test'
  CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY || 'test_secret' }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || 'sk_test_mock' }}
  NEXTAUTH_SECRET: 'test_secret'

jobs:
  test-coverage:
    name: 'Jest Tests & Coverage'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test'

      - name: Run Jest tests with coverage
        run: npm run test
        env:
          CI: true

      - name: Check coverage threshold
        run: |
          # Extract coverage percentage from Jest output
          COVERAGE=$(npm run test 2>&1 | grep -o "All files.*[0-9]\+\.[0-9]\+%" | grep -o "[0-9]\+\.[0-9]\+%" | head -1 | cut -d'%' -f1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 75" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% is below 75% threshold"
            exit 1
          else
            echo "‚úÖ Coverage $COVERAGE% meets 75% threshold"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  load-test:
    name: 'k6 Load Testing'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start application in background
        run: |
          npm start &
          sleep 10
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/monitoring; do sleep 2; done'
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test'

      - name: Run k6 load tests
        run: |
          k6 run __test__/load/api-load-test.js
        env:
          BASE_URL: 'http://localhost:3000'

      - name: Check k6 thresholds
        run: |
          if [ -f "load-test-results.json" ]; then
            # Parse results and check thresholds
            echo "‚úÖ Load test completed - checking thresholds..."
            cat load-test-results.json | jq '.metrics.http_req_failed.values.rate < 0.01 and .metrics.http_req_duration.values["p(95)"] < 200'
          fi

  lighthouse:
    name: 'Lighthouse CI'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test'

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

  quality-gate:
    name: 'Quality Gate'
    runs-on: ubuntu-latest
    needs: [test-coverage, load-test, lighthouse]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Test Coverage: ${{ needs.test-coverage.result }}"
          echo "Load Test: ${{ needs.load-test.result }}"
          echo "Lighthouse: ${{ needs.lighthouse.result }}"
          
          if [[ "${{ needs.test-coverage.result }}" != "success" ]]; then
            echo "‚ùå Test coverage failed"
            exit 1
          fi
          
          if [[ "${{ needs.load-test.result }}" != "success" ]]; then
            echo "‚ùå Load testing failed"
            exit 1
          fi
          
          if [[ "${{ needs.lighthouse.result }}" != "success" ]]; then
            echo "‚ùå Lighthouse checks failed"
            exit 1
          fi
          
          echo "‚úÖ All quality checks passed!"

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Quality Check Results')
            );
            
            const testResult = '${{ needs.test-coverage.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const loadResult = '${{ needs.load-test.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const lighthouseResult = '${{ needs.lighthouse.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            
            const body = `## Quality Check Results
            
            | Check | Status |
            |-------|--------|
            | Jest Tests & Coverage (‚â•75%) | ${testResult} |
            | k6 Load Test (p95<200ms, <1% errors) | ${loadResult} |
            | Lighthouse CI (Core Web Vitals) | ${lighthouseResult} |
            
            ${testResult === '‚úÖ' && loadResult === '‚úÖ' && lighthouseResult === '‚úÖ' 
              ? 'üéâ All quality checks passed!' 
              : '‚ö†Ô∏è Some quality checks failed. See job details above.'}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } 