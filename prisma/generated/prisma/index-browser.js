
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  image: 'image',
  clerkUserId: 'clerkUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  phone: 'phone',
  email: 'email',
  serviceArea: 'serviceArea',
  onboarded: 'onboarded',
  logo: 'logo',
  minNoticeHours: 'minNoticeHours',
  maxNoticeHours: 'maxNoticeHours',
  minBookingAmount: 'minBookingAmount',
  bufferBeforeHours: 'bufferBeforeHours',
  bufferAfterHours: 'bufferAfterHours',
  timeZone: 'timeZone',
  stripeAccountId: 'stripeAccountId',
  socialMedia: 'socialMedia',
  customDomain: 'customDomain',
  subdomain: 'subdomain',
  siteConfig: 'siteConfig',
  onboardingError: 'onboardingError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  clerkOrgId: 'clerkOrgId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clerkMembershipId: 'clerkMembershipId',
  userId: 'userId',
  organizationId: 'organizationId'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  dimensions: 'dimensions',
  capacity: 'capacity',
  price: 'price',
  setupTime: 'setupTime',
  teardownTime: 'teardownTime',
  images: 'images',
  primaryImage: 'primaryImage',
  stripeProductId: 'stripeProductId',
  stripePriceId: 'stripePriceId',
  status: 'status',
  minimumSpace: 'minimumSpace',
  weightLimit: 'weightLimit',
  ageRange: 'ageRange',
  weatherRestrictions: 'weatherRestrictions',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  businessId: 'businessId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  notes: 'notes',
  bookingCount: 'bookingCount',
  totalSpent: 'totalSpent',
  lastBooking: 'lastBooking',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isLead: 'isLead',
  status: 'status',
  type: 'type',
  businessId: 'businessId'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  eventDate: 'eventDate',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  totalAmount: 'totalAmount',
  depositAmount: 'depositAmount',
  depositPaid: 'depositPaid',
  eventType: 'eventType',
  eventAddress: 'eventAddress',
  eventCity: 'eventCity',
  eventState: 'eventState',
  eventZipCode: 'eventZipCode',
  eventTimeZone: 'eventTimeZone',
  participantAge: 'participantAge',
  participantCount: 'participantCount',
  subtotalAmount: 'subtotalAmount',
  taxAmount: 'taxAmount',
  taxRate: 'taxRate',
  isCompleted: 'isCompleted',
  isCancelled: 'isCancelled',
  specialInstructions: 'specialInstructions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  couponId: 'couponId',
  businessId: 'businessId',
  customerId: 'customerId'
};

exports.Prisma.BookingItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  startUTC: 'startUTC',
  endUTC: 'endUTC',
  bookingId: 'bookingId',
  status: 'status',
  inventoryId: 'inventoryId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  type: 'type',
  status: 'status',
  currency: 'currency',
  metadata: 'metadata',
  stripeClientSecret: 'stripeClientSecret',
  stripePaymentId: 'stripePaymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paidAt: 'paidAt',
  bookingId: 'bookingId',
  businessId: 'businessId'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  discountType: 'discountType',
  discountAmount: 'discountAmount',
  maxUses: 'maxUses',
  usedCount: 'usedCount',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  minimumAmount: 'minimumAmount',
  businessId: 'businessId',
  stripeCouponId: 'stripeCouponId',
  stripePromotionId: 'stripePromotionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SalesFunnelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  popupTitle: 'popupTitle',
  popupText: 'popupText',
  popupImage: 'popupImage',
  formTitle: 'formTitle',
  thankYouMessage: 'thankYouMessage',
  couponId: 'couponId',
  businessId: 'businessId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WaiverScalarFieldEnum = {
  id: 'id',
  status: 'status',
  templateVersion: 'templateVersion',
  documentUrl: 'documentUrl',
  docuSealDocumentId: 'docuSealDocumentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  businessId: 'businessId',
  customerId: 'customerId',
  bookingId: 'bookingId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  status: 'status',
  priceId: 'priceId',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  stripeInvoiceId: 'stripeInvoiceId',
  status: 'status',
  amountDue: 'amountDue',
  amountPaid: 'amountPaid',
  amountRemaining: 'amountRemaining',
  currency: 'currency',
  invoicePdfUrl: 'invoicePdfUrl',
  hostedInvoiceUrl: 'hostedInvoiceUrl',
  issuedAt: 'issuedAt',
  paidAt: 'paidAt',
  voidedAt: 'voidedAt',
  dueAt: 'dueAt',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  businessId: 'businessId',
  customerId: 'customerId',
  bookingId: 'bookingId'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  stripeQuoteId: 'stripeQuoteId',
  status: 'status',
  amountTotal: 'amountTotal',
  amountSubtotal: 'amountSubtotal',
  amountTax: 'amountTax',
  currency: 'currency',
  hostedQuoteUrl: 'hostedQuoteUrl',
  pdfUrl: 'pdfUrl',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  businessId: 'businessId',
  customerId: 'customerId',
  bookingId: 'bookingId'
};

exports.Prisma.CustomerStripeAccountScalarFieldEnum = {
  id: 'id',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  businessId: 'businessId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.InventoryType = exports.$Enums.InventoryType = {
  BOUNCE_HOUSE: 'BOUNCE_HOUSE',
  INFLATABLE: 'INFLATABLE',
  GAME: 'GAME',
  OTHER: 'OTHER'
};

exports.InventoryStatus = exports.$Enums.InventoryStatus = {
  AVAILABLE: 'AVAILABLE',
  PENDING: 'PENDING',
  BOOKED: 'BOOKED',
  MAINTENANCE: 'MAINTENANCE',
  RETIRED: 'RETIRED'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  HOLD: 'HOLD',
  EXPIRED: 'EXPIRED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  DEPOSIT: 'DEPOSIT',
  FULL_PAYMENT: 'FULL_PAYMENT',
  CASH: 'CASH',
  REFUND: 'REFUND'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  EXPIRED: 'EXPIRED'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED'
};

exports.WaiverStatus = exports.$Enums.WaiverStatus = {
  PENDING: 'PENDING',
  SIGNED: 'SIGNED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.SubscriptionType = exports.$Enums.SubscriptionType = {
  SOLO: 'SOLO',
  GROWTH: 'GROWTH'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  OPEN: 'OPEN',
  PAID: 'PAID',
  VOID: 'VOID',
  UNCOLLECTIBLE: 'UNCOLLECTIBLE'
};

exports.QuoteStatus = exports.$Enums.QuoteStatus = {
  DRAFT: 'DRAFT',
  OPEN: 'OPEN',
  SENT: 'SENT',
  ACCEPTED: 'ACCEPTED',
  CANCELED: 'CANCELED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Business: 'Business',
  Organization: 'Organization',
  Membership: 'Membership',
  Inventory: 'Inventory',
  Customer: 'Customer',
  Booking: 'Booking',
  BookingItem: 'BookingItem',
  Payment: 'Payment',
  Coupon: 'Coupon',
  SalesFunnel: 'SalesFunnel',
  Waiver: 'Waiver',
  Subscription: 'Subscription',
  Invoice: 'Invoice',
  Quote: 'Quote',
  CustomerStripeAccount: 'CustomerStripeAccount'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
