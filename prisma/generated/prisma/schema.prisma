generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String?      @unique
  name        String?
  createdAt   DateTime     @default(now())
  image       String?
  updatedAt   DateTime     @default(now())
  clerkUserId String?      @unique
  memberships Membership[]

  @@index([email])
}

model Business {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  phone                  String?
  email                  String?
  logo                   String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now())
  stripeAccountId        String?
  customDomain           String?
  siteConfig             Json
  serviceArea            String[]                @default([])
  subdomain              String?                 @unique
  onboardingError        String?
  timeZone               String                  @default("America/Chicago")
  socialMedia            Json?
  onboarded              Boolean                 @default(false)
  organizationId         String                  @unique
  bufferAfterHours       Int                     @default(0)
  bufferBeforeHours      Int                     @default(2)
  maxNoticeHours         Int                     @default(2160)
  minBookingAmount       Float                   @default(0)
  minNoticeHours         Int                     @default(24)
  embeddedComponents     Boolean                 @default(false)
  embedConfig            Json?
  bookings               Booking[]
  organization           Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  coupons                Coupon[]
  customers              Customer[]
  customerStripeAccounts CustomerStripeAccount[]
  inventory              Inventory[]
  invoices               Invoice[]
  payments               Payment[]
  quotes                 Quote[]
  salesFunnels           SalesFunnel[]
  waivers                Waiver[]
}

model Organization {
  id           String        @id @default(cuid())
  clerkOrgId   String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  business     Business?
  memberships  Membership[]
  subscription Subscription?

  @@index([clerkOrgId])
}

model Membership {
  id                String       @id @default(cuid())
  userId            String
  organizationId    String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())
  role              Role
  clerkMembershipId String       @unique
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Inventory {
  id                  String          @id @default(cuid())
  type                InventoryType
  name                String
  description         String?
  dimensions          String
  capacity            Int
  price               Float
  setupTime           Int
  teardownTime        Int
  images              String[]
  primaryImage        String?
  status              InventoryStatus
  minimumSpace        String
  weightLimit         Int
  ageRange            String
  weatherRestrictions String[]
  businessId          String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())
  quantity            Int             @default(1)
  stripePriceId       String?
  stripeProductId     String?         @unique
  version             Int             @default(0)
  bookingItems        BookingItem[]
  business            Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
}

model Customer {
  id                     String                  @id @default(cuid())
  name                   String
  email                  String
  phone                  String
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  notes                  String?
  bookingCount           Int                     @default(0)
  totalSpent             Float                   @default(0)
  lastBooking            DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now())
  businessId             String
  isLead                 Boolean                 @default(false)
  status                 String                  @default("Active")
  type                   String                  @default("Regular")
  bookings               Booking[]
  business               Business                @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customerStripeAccounts CustomerStripeAccount[]
  invoices               Invoice[]
  quotes                 Quote[]
  waivers                Waiver[]

  @@unique([email, businessId])
  @@index([businessId])
  @@index([email])
  @@index([phone])
}

model Booking {
  id                  String        @id @default(cuid())
  eventDate           DateTime      @db.Date
  startTime           DateTime
  endTime             DateTime
  status              BookingStatus @default(PENDING)
  totalAmount         Float?
  depositAmount       Float?
  depositPaid         Boolean       @default(false)
  eventType           String?
  eventAddress        String?
  eventCity           String?
  eventState          String?
  eventZipCode        String?
  participantAge      Int?
  participantCount    Int?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  businessId          String
  customerId          String?
  specialInstructions String?
  subtotalAmount      Float?
  taxAmount           Float?
  taxRate             Float?
  isCancelled         Boolean       @default(false)
  isCompleted         Boolean       @default(false)
  eventTimeZone       String        @default("America/Chicago")
  couponId            String?
  expiresAt           DateTime?
  currentQuoteId      String?
  business            Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  coupon              Coupon?       @relation(fields: [couponId], references: [id])
  customer            Customer?     @relation(fields: [customerId], references: [id])
  inventoryItems      BookingItem[]
  invoices            Invoice[]
  payments            Payment[]
  quotes              Quote[]
  currentQuote        Quote?        @relation("CurrentQuote", fields: [currentQuoteId], references: [id])
  waivers             Waiver[]

  @@index([businessId])
  @@index([customerId])
  @@index([eventDate])
  @@index([couponId])
  @@index([startTime, endTime])
  @@index([status, startTime])
  @@index([status, expiresAt])
}

model BookingItem {
  id          String                   @id @default(cuid())
  bookingId   String
  inventoryId String
  quantity    Int                      @default(1)
  price       Float
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @default(now())
  status      String                   @map("bookingStatus")
  endUTC      DateTime
  startUTC    DateTime
  period      Unsupported("tstzrange")
  booking     Booking                  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  inventory   Inventory                @relation(fields: [inventoryId], references: [id])

  @@index([bookingId])
  @@index([inventoryId])
  @@index([status])
}

model Payment {
  id                 String        @id @default(cuid())
  amount             Decimal       @db.Decimal(10, 2)
  type               PaymentType
  status             PaymentStatus
  createdAt          DateTime      @default(now())
  bookingId          String
  businessId         String
  currency           String        @default("USD")
  metadata           Json?
  stripeClientSecret String?
  stripePaymentId    String?
  updatedAt          DateTime      @default(now())
  paidAt             DateTime?
  booking            Booking       @relation(fields: [bookingId], references: [id])
  business           Business      @relation(fields: [businessId], references: [id])
}

model Coupon {
  id                String        @id @default(cuid())
  code              String
  description       String?
  discountType      DiscountType
  discountAmount    Float
  maxUses           Int?
  usedCount         Int           @default(0)
  startDate         DateTime?
  endDate           DateTime?
  isActive          Boolean       @default(true)
  minimumAmount     Float?
  businessId        String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  stripeCouponId    String?
  stripePromotionId String?
  booking           Booking[]
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  salesFunnels      SalesFunnel[]

  @@unique([code, businessId])
  @@index([businessId])
}

model SalesFunnel {
  id              String   @id @default(cuid())
  name            String
  isActive        Boolean  @default(true)
  popupTitle      String
  popupText       String
  popupImage      String?
  formTitle       String
  thankYouMessage String
  businessId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  couponId        String?
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  coupon          Coupon?  @relation(fields: [couponId], references: [id])

  @@index([businessId])
}

model Waiver {
  id                  String       @id @default(cuid())
  businessId          String
  customerId          String
  bookingId           String
  status              WaiverStatus @default(PENDING)
  templateVersion     String
  documentUrl         String
  auditLogUrl         String?
  originalAuditLogUrl String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now())
  docuSealDocumentId  String       @unique
  booking             Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  business            Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer            Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, businessId, bookingId])
  @@index([businessId])
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
}

model Subscription {
  id                   String           @id @default(cuid())
  stripeCustomerId     String           @unique
  stripeSubscriptionId String           @unique
  status               String
  priceId              String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean
  organizationId       String           @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  type                 SubscriptionType @default(GROWTH)
  organization         Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model Invoice {
  id               String        @id @default(uuid())
  stripeInvoiceId  String?       @unique
  status           InvoiceStatus
  amountDue        Float
  amountPaid       Float         @default(0)
  amountRemaining  Float         @default(0)
  currency         String
  invoicePdfUrl    String?
  hostedInvoiceUrl String?
  issuedAt         DateTime?
  paidAt           DateTime?
  voidedAt         DateTime?
  dueAt            DateTime?
  expiresAt        DateTime?
  metadata         Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  businessId       String
  customerId       String
  bookingId        String
  booking          Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  business         Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer         Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
  @@index([stripeInvoiceId])
  @@index([expiresAt])
}

model Quote {
  id              String      @id @default(cuid())
  stripeQuoteId   String      @unique
  status          QuoteStatus
  amountTotal     Float
  amountSubtotal  Float
  amountTax       Float
  currency        String
  appQuoteUrl     String?
  stripeHostedUrl String?
  pdfUrl          String?
  expiresAt       DateTime?
  metadata        Json?
  version         Int         @default(1)
  replacesQuoteId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  businessId      String
  customerId      String
  bookingId       String
  booking         Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  business        Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  currentBookings Booking[]   @relation("CurrentQuote")

  @@index([businessId])
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
}

model CustomerStripeAccount {
  id               String   @id @default(uuid())
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  customerId       String
  businessId       String
  business         Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer         Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, businessId])
  @@index([customerId])
  @@index([businessId])
  @@index([stripeCustomerId])
}

enum Role {
  ADMIN
  MEMBER
}

enum SubscriptionType {
  SOLO
  GROWTH
}

enum QuoteStatus {
  DRAFT
  OPEN
  ACCEPTED
  CANCELED
  EXPIRED
}

enum InventoryType {
  BOUNCE_HOUSE
  WATER_SLIDE
  GAME
  OTHER
}

enum InventoryStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
  RETIRED
  PENDING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  HOLD
  EXPIRED
}

enum PaymentType {
  DEPOSIT
  FULL_PAYMENT
  REFUND
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum WaiverStatus {
  PENDING
  SIGNED
  REJECTED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}
