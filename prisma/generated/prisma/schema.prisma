generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id          String       @id @default(cuid())
  email       String?      @unique
  name        String?
  image       String?
  clerkUserId String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  memberships Membership[]

  @@index([email])
}

model Business {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Contact info
  address     String?
  city        String?
  state       String?
  zipCode     String?
  phone       String?
  email       String?
  serviceArea String[] @default([])
  onboarded   Boolean  @default(false)

  // Brand assets
  logo String?

  // Booking settings
  minNoticeHours    Int    @default(24) // minimum hours in advance
  maxNoticeHours    Int    @default(2160) // maximum hours in advance (90 days)
  minBookingAmount  Float  @default(0) // minimum dollar total per booking
  bufferBeforeHours Int    @default(2) // hours to reserve before each booking
  bufferAfterHours  Int    @default(0) // hours to reserve after each booking
  timeZone          String @default("America/Chicago")

  // Integrations
  stripeAccountId String?

  socialMedia        Json?
  customDomain       String?
  subdomain          String? @unique
  siteConfig         Json
  onboardingError    String?
  embeddedComponents Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  inventory              Inventory[]
  customers              Customer[]
  bookings               Booking[]
  payments               Payment[]
  coupons                Coupon[]
  salesFunnels           SalesFunnel[]
  waivers                Waiver[]
  invoices               Invoice[]
  quotes                 Quote[] // ADDED: Relation back to Quote model
  customerStripeAccounts CustomerStripeAccount[]

  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Organization {
  id         String   @id @default(cuid())
  clerkOrgId String   @unique
  name       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  business     Business?
  memberships  Membership[]
  subscription Subscription?

  @@index([clerkOrgId])
}

model Membership {
  id                String   @id @default(cuid())
  role              Role
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  clerkMembershipId String   @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Inventory {
  id                  String          @id @default(cuid())
  type                InventoryType
  name                String
  description         String?
  dimensions          String
  capacity            Int
  price               Float
  setupTime           Int
  teardownTime        Int
  images              String[]
  primaryImage        String?
  stripeProductId     String?         @unique
  stripePriceId       String?
  status              InventoryStatus
  minimumSpace        String
  weightLimit         Int
  ageRange            String
  weatherRestrictions String[]
  quantity            Int             @default(1)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())
  version             Int             @default(0)
  business            Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId          String

  bookingItems BookingItem[]

  @@index([businessId])
}

model Customer {
  id           String    @id @default(cuid())
  name         String
  email        String
  phone        String
  address      String?
  city         String?
  state        String?
  zipCode      String?
  notes        String?
  bookingCount Int       @default(0)
  totalSpent   Float     @default(0)
  lastBooking  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  isLead Boolean @default(false)
  status String  @default("Active")
  type   String  @default("Regular")

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  bookings               Booking[]
  waivers                Waiver[]
  invoices               Invoice[]
  quotes                 Quote[] // ADDED: Relation back to Quote model
  customerStripeAccounts CustomerStripeAccount[]

  @@unique([email, businessId])
  @@index([businessId])
  @@index([email])
  @@index([phone])
}

model Booking {
  id                  String        @id @default(cuid())
  eventDate           DateTime      @db.Date
  startTime           DateTime      @db.Timestamp(3)
  endTime             DateTime      @db.Timestamp(3)
  status              BookingStatus @default(PENDING)
  totalAmount         Float?
  depositAmount       Float?
  depositPaid         Boolean       @default(false)
  eventType           String?
  eventAddress        String?
  eventCity           String?
  eventState          String?
  eventZipCode        String?
  eventTimeZone       String        @default("America/Chicago")
  participantAge      Int?
  participantCount    Int?
  subtotalAmount      Float?
  taxAmount           Float?
  taxRate             Float?
  isCompleted         Boolean       @default(false)
  isCancelled         Boolean       @default(false)
  specialInstructions String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  expiresAt           DateTime?
  couponId            String?
  coupon              Coupon?       @relation(fields: [couponId], references: [id])
  business            Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId          String
  customer            Customer?     @relation(fields: [customerId], references: [id])
  customerId          String?
  inventoryItems      BookingItem[]
  payments            Payment[]
  waivers             Waiver[]
  invoice             Invoice?
  quote               Quote?

  @@index([businessId])
  @@index([customerId])
  @@index([eventDate])
  @@index([couponId])
  @@index([startTime, endTime])
  @@index([status, startTime])
  @@index([status, expiresAt])
}

model BookingItem {
  id          String                   @id @default(cuid())
  quantity    Int                      @default(1)
  price       Float
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @default(now())
  startUTC    DateTime
  endUTC      DateTime
  booking     Booking                  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   String
  status      String                   @map("bookingStatus")
  inventory   Inventory                @relation(fields: [inventoryId], references: [id])
  inventoryId String
  period      Unsupported("tstzrange")

  @@index([bookingId])
  @@index([inventoryId])
  @@index([status])
}

model Payment {
  id                 String        @id @default(cuid())
  amount             Decimal       @db.Decimal(10, 2)
  type               PaymentType
  status             PaymentStatus
  currency           String        @default("USD")
  metadata           Json?
  stripeClientSecret String?
  stripePaymentId    String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
  paidAt             DateTime?
  booking            Booking       @relation(fields: [bookingId], references: [id])
  bookingId          String
  business           Business      @relation(fields: [businessId], references: [id])
  businessId         String
}

model Coupon {
  id                String        @id @default(cuid())
  code              String
  description       String?
  discountType      DiscountType
  discountAmount    Float
  maxUses           Int?
  usedCount         Int           @default(0)
  startDate         DateTime?
  endDate           DateTime?
  isActive          Boolean       @default(true)
  minimumAmount     Float?
  businessId        String
  stripeCouponId    String?
  stripePromotionId String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  booking           Booking[]
  salesFunnels      SalesFunnel[]

  @@unique([code, businessId])
  @@index([businessId])
}

model SalesFunnel {
  id              String   @id @default(cuid())
  name            String
  isActive        Boolean  @default(true)
  popupTitle      String
  popupText       String
  popupImage      String?
  formTitle       String
  thankYouMessage String
  couponId        String?
  businessId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  coupon          Coupon?  @relation(fields: [couponId], references: [id])

  @@index([businessId])
}

model Waiver {
  id                 String       @id @default(cuid())
  status             WaiverStatus @default(PENDING)
  templateVersion    String
  documentUrl        String
  docuSealDocumentId String       @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId  String

  @@unique([customerId, businessId, bookingId])
  @@index([businessId])
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
}

model Subscription {
  id                   String           @id @default(cuid())
  stripeCustomerId     String           @unique
  stripeSubscriptionId String           @unique
  status               String
  priceId              String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean
  organization         Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String           @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  type                 SubscriptionType @default(GROWTH)

  @@index([organizationId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

// ADDED: Invoice model
model Invoice {
  id               String        @id @default(uuid())
  stripeInvoiceId  String?       @unique
  status           InvoiceStatus
  amountDue        Float
  amountPaid       Float         @default(0)
  amountRemaining  Float         @default(0)
  currency         String
  invoicePdfUrl    String?
  hostedInvoiceUrl String?
  issuedAt         DateTime?
  paidAt           DateTime?
  voidedAt         DateTime?
  dueAt            DateTime?
  expiresAt        DateTime? // For the 24-hour hold
  metadata         Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId  String   @unique

  @@index([businessId])
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
  @@index([stripeInvoiceId])
  @@index([expiresAt])
}

model Quote {
  id             String      @id @default(cuid())
  stripeQuoteId  String      @unique
  status         QuoteStatus // Link to QuoteStatus enum
  amountTotal    Float
  amountSubtotal Float
  amountTax      Float
  currency       String
  hostedQuoteUrl String? // URL provided by Stripe for the customer
  pdfUrl         String? // URL provided by Stripe for the PDF version
  expiresAt      DateTime? // Expiration date from Stripe quote
  metadata       Json? // Store relevant metadata (e.g., prisma IDs)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  business       Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId     String
  customer       Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  booking        Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String      @unique // Each booking might have one associated quote

  @@index([businessId])
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
}

// Enums
enum SubscriptionType {
  SOLO
  GROWTH
}

enum QuoteStatus {
  DRAFT
  OPEN
  SENT
  ACCEPTED
  CANCELED
  EXPIRED
}

enum InventoryType {
  BOUNCE_HOUSE
  WATER_SLIDE
  GAME
  OTHER
}

enum InventoryStatus {
  AVAILABLE
  PENDING
  BOOKED
  MAINTENANCE
  RETIRED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  HOLD
  EXPIRED
}

enum PaymentType {
  DEPOSIT
  FULL_PAYMENT
  CASH
  REFUND
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum WaiverStatus {
  PENDING
  SIGNED
  REJECTED
  EXPIRED
}

// ADDED: InvoiceStatusEnum
enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

// ADDED: Linking table for Customer <-> Business specific Stripe Customer IDs
model CustomerStripeAccount {
  id               String   @id @default(uuid())
  stripeCustomerId String   @unique // The Stripe Customer ID for this specific business relationship
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Foreign Keys & Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Constraints & Indexes
  @@unique([customerId, businessId]) // Ensure one Stripe ID per customer per business
  @@index([customerId])
  @@index([businessId])
  @@index([stripeCustomerId])
}
